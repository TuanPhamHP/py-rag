import os
import json
import pandas as pd
import chromadb
from PyPDF2 import PdfReader
from docx import Document
from typing import List
import fitz  # PyMuPDF
from PIL import Image
import pytesseract

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c l∆∞u file
UPLOAD_DIR = "uploaded_files"
CHROMADB_PATH = "app/db/chromadb_store"

# Kh·ªüi t·∫°o client c·ªßa ChromaDB
chroma_client = chromadb.PersistentClient(path=CHROMADB_PATH)
chroma_collection = chroma_client.get_or_create_collection(name="document_embeddings")

# C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n t·ªõi Tesseract (n·∫øu c·∫ßn thi·∫øt)
pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"  # l·∫•y t·ª´ which tesseract(Linux|Unbutu) ho·∫∑c where teseract(Windows)

def read_pdf(file_path: str) -> str:
    """ƒê·ªçc n·ªôi dung t·ª´ file PDF."""
    doc = fitz.open(file_path)
    text = ""
    
    # ƒê·ªçc vƒÉn b·∫£n t·ª´ c√°c trang PDF
    for page_num in range(len(doc)):
        page = doc.load_page(page_num)
        text += page.get_text("text") + "\n"
        
        # N·∫øu kh√¥ng c√≥ vƒÉn b·∫£n, th·ª≠ nh·∫≠n di·ªán vƒÉn b·∫£n t·ª´ h√¨nh ·∫£nh (OCR)
        if not text.strip():  # N·∫øu kh√¥ng c√≥ vƒÉn b·∫£n, s·ª≠ d·ª•ng OCR
            pix = page.get_pixmap()  # Chuy·ªÉn trang PDF th√†nh h√¨nh ·∫£nh
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
            text += pytesseract.image_to_string(img)  # S·ª≠ d·ª•ng OCR ƒë·ªÉ nh·∫≠n di·ªán vƒÉn b·∫£n t·ª´ h√¨nh ·∫£nh

    return text

def read_docx(file_path: str) -> str:
    doc = Document(file_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    return text.strip()

def read_json(file_path: str) -> str:
    with open(file_path, "r", encoding="utf-8") as file:
        data = json.load(file)
    return json.dumps(data, indent=2)

def read_csv(file_path: str) -> str:
    df = pd.read_csv(file_path)
    return df.to_csv(index=False)

def read_file(file_path: str) -> str:
    """
    X·ª≠ l√Ω ƒë·ªçc file t·ª´ th∆∞ m·ª•c uploaded_files
    """
    ext = file_path.split(".")[-1].lower()
    if file_path.endswith(".pdf"):
        return read_pdf(file_path)
    elif file_path.endswith(".docx"):
        return read_docx(file_path)
    elif file_path.endswith(".json"):
        return read_json(file_path)
    elif file_path.endswith(".csv"):
        return read_csv(file_path)
    # elif ext == ".doc":
    #     print(f"üìÑ Chuy·ªÉn ƒë·ªïi file .doc ‚Üí .docx: {file_path}")
    #     docx_path = convert_doc_to_docx(file_path)  # Chuy·ªÉn sang docx
    #     return read_docx(docx_path)  # ƒê·ªçc file m·ªõi
    else:
        raise ValueError("Unsupported file type")


def add_to_chromadb(documents: List[dict]):
    """L∆∞u t√†i li·ªáu ƒë√£ ƒë·ªçc v√†o ChromaDB."""
    collection = chroma_client.get_or_create_collection("documents")
    for doc in documents:
        chroma_client.insert(doc["id"], doc["content"], metadata=doc.get("metadata", {}))


def process_and_store_file(filename: str):
    """
    ƒê·ªçc file, tr√≠ch xu·∫•t d·ªØ li·ªáu v√† l∆∞u v√†o ChromaDB.
    """
    file_path = f"{UPLOAD_DIR}/{filename}"
    try:
        text = read_file(file_path)
        # T·∫°o Document object ƒë·ªÉ l∆∞u v√†o ChromaDB
        document = [{
            "id": filename,
            "content": text,
            "metadata": {"filename": filename}
        }]
        add_to_chromadb(document)
        print(f"‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng file: {filename} v√†o ChromaDB")
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω {filename}: {e}")


def load_all_files() -> List[dict]:
    """T·∫£i to√†n b·ªô n·ªôi dung c√°c file trong /uploaded_files ƒë·ªÉ x·ª≠ l√Ω"""
    documents = []
    for filename in os.listdir(UPLOAD_DIR):
        file_path = os.path.join(UPLOAD_DIR, filename)
        content = read_file(file_path)
        if content:  # N·∫øu file ƒë·ªçc th√†nh c√¥ng
            documents.append({"id": filename, "content": content})
    return documents
